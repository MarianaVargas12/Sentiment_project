pipeline {
    agent any
    options {disableConcurrentBuilds()}
    environment {
        GOOGLE_PROJECT_ID = "sentimentproject-362601" 
        GOOGLE_PROJECT_NAME = "SentimentProject"
        GOOGLE_APPLICATION_CREDENTIALS = credentials('service_account')
        PATH = "C:\\Windows\\System32"
    }
    parameters { 
      choice(name: 'ENTORNOS', choices: ['dev', 'pre', 'pro'], description: 'Seleccione el entorno a utilizar')
      choice(name: 'ACCION', choices: ['', 'plan-apply', 'destroy'], description: 'Seleccione el entorno a utilizar')
    }
    stages{
        
        stage('clean workspaces -----------') { 
            steps {
              cleanWs()
              //bat 'env'
            } //steps
        }  //stage

        stage("git clone----"){
            steps {
                cleanWs()
                    checkout([$class: 'GitSCM', 
                    branches: [[name: '*/pipeline']], 
                    extensions: [[$class: 'CleanCheckout']], 
                    userRemoteConfigs: [[credentialsId: 'b22a0158-1387-4e82-a6aa-6a153ddafc09', url: 'https://github.com/MarianaVargas12/Sentiment_project.git']]])
                bat 'dir'
            } //steps
        }  //stage

        stage('Install----') {
         steps {
            bat ' cd cloud_function/ && C:\\Users\\maria\\AppData\\Local\\Programs\\Python\\Python310\\Scripts\\pip.exe install -r requirements.txt'
            } //steps
        }  //stage

        stage('Lint----') {
         steps {
            bat ' cd cloud_function/ && C:\\Users\\maria\\AppData\\Local\\Programs\\Python\\Python310\\Scripts\\pylint.exe main.py --exit-zero'
            } //steps
        }  //stage

    
        stage('Terraform init----') {
         steps {
            bat 'C:\\ProgramData\\chocolatey\\bin\\terraform.exe --version'
            bat ' cd terraform/ && C:\\ProgramData\\chocolatey\\bin\\terraform.exe  init'
            } //steps
        }  //stage

        stage('Terraform plan----') {
            steps {
               bat 'cd terraform/ && C:\\ProgramData\\chocolatey\\bin\\terraform.exe  plan'
            } //steps
        }  //stage
        
        stage('Confirmaci√≥n de accion') {
            steps {
                script {
                    def userInput = input(id: 'yes', message: params.ACCION + '?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Apply terraform', name: 'yes'] ])
                }
            }
        }
        
        stage('Terraform apply or destroy ----------------') {
            steps {
               bat 'echo "comienza"'
            script{  
                if (params.ACCION == "destroy"){
                         bat ' echo "llego" + params.ACCION'   
                         bat 'cd terraform/ && C:\\ProgramData\\chocolatey\\bin\\terraform.exe destroy -auto-approve'
                } else {
                         bat 'echo  "llego" + params.ACCION'                 
                         bat 'cd terraform/ && C:\\ProgramData\\chocolatey\\bin\\terraform.exe apply -auto-approve'
                }  // if

            }
            } //steps
        }  //stage
        
   }  // stages
} //pipeline

//Tomado de https://github.com/agustinjaume/jenkins-server/blob/master/README-punto-16-gcp-terraform.md